package com.kazcables.forms;

import com.kazcables.model.Branch;
import com.kazcables.model.Department;
import com.kazcables.model.Employee;
import com.kazcables.model.HierarchyLevel;
import com.kazcables.model.Organization;
import com.kazcables.recordview.EmployeeRecords;
import java.util.Set;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;

public final class addEmployees extends javax.swing.JPanel {

    private final Organization organization;
    private final EmployeeRecords emprecords;

    public addEmployees(Organization org, EmployeeRecords emprecords) {
        initComponents();
        this.organization = org;
        this.emprecords = emprecords;
        String[] branchNames = this.organization.getBranchNames();
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>(branchNames);
        jcb_branch.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbl_email = new javax.swing.JLabel();
        jbl_phone = new javax.swing.JLabel();
        lbl_age = new javax.swing.JLabel();
        lbl_salary = new javax.swing.JLabel();
        lbl_department = new javax.swing.JLabel();
        tf_fname = new javax.swing.JTextField();
        tf_phone = new javax.swing.JTextField();
        jb_saveEmp = new javax.swing.JButton();
        jb_clear = new javax.swing.JButton();
        lbl_role = new javax.swing.JLabel();
        lbl_gender = new javax.swing.JLabel();
        tf_lname = new javax.swing.JTextField();
        lbl_branch = new javax.swing.JLabel();
        lbl_fname = new javax.swing.JLabel();
        tf_email = new javax.swing.JTextField();
        lbl_lname = new javax.swing.JLabel();

        lbl_email.setText("Email Adress");

        jbl_phone.setText("Phone Number");

        lbl_age.setText("Date of Birth");

        jcb_roles.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcb_roles.setEnabled(false);
        jcb_roles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcb_rolesActionPerformed(evt);
            }
        });

        jcb_department.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- Not Specified --", "Executive", "Management", "Sales", "Marketing", "Engineering", "IT (Information Technology)" }));
        jcb_department.setEnabled(false);
        jcb_department.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcb_departmentActionPerformed(evt);
            }
        });

        lbl_salary.setText("Salary");

        lbl_department.setText("Department");

        jb_saveEmp.setText("Save");
        jb_saveEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_saveEmpActionPerformed(evt);
            }
        });

        jcb_birthYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--year--", "2024", "2023", "2022", "2021", "2020", "2019", "2018", "2017", "2016", "2015", "2014", "2013", "2012", "2011", "2010", "2009", "2008", "2007", "2006", "2005", "2004", "2003", "2002", "2001", "2000", "1999", "1998", "1997", "1996", "1995", "1994", "1993", "1992", "1991", "1990", "1989", "1988", "1987", "1986", "1985", "1984", "1983", "1982", "1981", "1980", "1979", "1978", "1977", "1976", "1975", "1974", "1973", "1972", "1971", "1970", "1969", "1968", "1967", "1966", "1965", "1964", "1963", "1962", "1961", "1960" }));
        jcb_birthYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcb_birthYearActionPerformed(evt);
            }
        });

        jcb_birthMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--month--", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));
        jcb_birthMonth.setEnabled(false);
        jcb_birthMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcb_birthMonthActionPerformed(evt);
            }
        });

        jcb_birthDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--day--" }));
        jcb_birthDay.setEnabled(false);

        jb_clear.setText("Clear");
        jb_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_clearActionPerformed(evt);
            }
        });

        lbl_role.setText("Job Specification (role)");

        lbl_gender.setText("Sex");

        jcb_countryCode.setFont(new java.awt.Font("Helvetica Neue", 1, 12)); // NOI18N
        jcb_countryCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcb_countryCodeActionPerformed(evt);
            }
        });

        jcb_gender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Not Specified--", "Male", "Female" }));

        jcb_branch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcb_branchActionPerformed(evt);
            }
        });

        js_salary.setModel(new javax.swing.SpinnerNumberModel(5000, 5000, 100000, 5000));
        js_salary.setEnabled(false);

        lbl_branch.setText("Branch");

        lbl_fname.setText("First Name");

        tf_email.setForeground(new java.awt.Color(102, 102, 102));
        tf_email.setToolTipText("example@mail.ru");

        lbl_lname.setText("Last Name");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbl_role)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcb_roles, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lbl_fname)
                                .addComponent(lbl_lname))
                            .addComponent(lbl_email)
                            .addComponent(lbl_age)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(lbl_gender)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jcb_birthYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jcb_birthMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jcb_birthDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jcb_gender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(tf_fname)
                                .addComponent(tf_lname, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(tf_email, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbl_salary)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(js_salary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_department)
                            .addComponent(lbl_branch))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcb_branch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jcb_department, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jb_saveEmp)
                        .addGap(82, 82, 82)
                        .addComponent(jb_clear))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbl_phone)
                        .addGap(6, 6, 6)
                        .addComponent(jcb_countryCode, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(tf_phone, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf_fname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_fname))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf_lname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_lname))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_email)
                    .addComponent(tf_email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcb_gender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_gender))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_age)
                    .addComponent(jcb_birthYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcb_birthMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcb_birthDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbl_phone)
                    .addComponent(jcb_countryCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tf_phone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcb_branch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_branch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_department)
                    .addComponent(jcb_department, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_role)
                    .addComponent(jcb_roles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(js_salary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_salary))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb_saveEmp)
                    .addComponent(jb_clear))
                .addContainerGap(41, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jcb_rolesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcb_rolesActionPerformed
        int id = jcb_branch.getSelectedIndex();
        if (id<=0){return;}
        Branch branch = this.organization.getBranches().get(id-1);
        if (branch != null) {
            updateSalary(branch);
            js_salary.setEnabled(true);
        }
    }//GEN-LAST:event_jcb_rolesActionPerformed

    private void jcb_departmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcb_departmentActionPerformed
        String selectedDepartmentName = (String) jcb_department.getSelectedItem().toString().trim();
        Branch selectedBranch = this.getOrganization().getBranches().get(jcb_branch.getSelectedIndex());
        HierarchyLevel level = HierarchyLevel.valueOf(selectedDepartmentName);
        if (selectedBranch != null && level != null && jcb_department.getSelectedIndex()!=0) {
            Department selectedDepartment = selectedBranch.getDepartments().get(level);
            if (selectedDepartment != null) {
                updateRolesComboBox(selectedDepartment);
            }
        }
        updateComponentStates();
    }//GEN-LAST:event_jcb_departmentActionPerformed

    private void jb_saveEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_saveEmpActionPerformed
        Employee emp = saveEmployee();
        if (emp != null) {
            this.emprecords.addRow(emp.getRow());
        }
        emp = null;
    }//GEN-LAST:event_jb_saveEmpActionPerformed

    private void jcb_birthYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcb_birthYearActionPerformed
        jcb_birthMonth.setSelectedIndex(0);
        jcb_birthDay.setSelectedIndex(0);
        jcb_birthDay.setEnabled(false);
        if (jcb_birthYear.getSelectedIndex() != 0) {

            if ((Integer.parseInt(jcb_birthYear.getItemAt(1))) - (Integer.parseInt((String) jcb_birthYear.getSelectedItem())) <= 18) {
                JOptionPane.showMessageDialog(null, "Employee must be over 18!!");
            } else {
                jcb_birthMonth.setEnabled(true);
            }
        } else {
            jcb_birthMonth.setEnabled(false);
        }
    }//GEN-LAST:event_jcb_birthYearActionPerformed

    private void jcb_birthMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcb_birthMonthActionPerformed
        // handling and settings the days in a month of Employee's birthMonth
        if (jcb_birthMonth.getSelectedIndex() != 0) {
            // After birth Month gets selected, program needs to calculate how many days there are,
            // based on Employee's birth year and birth month,
            // some years, months like February could have 28 or 29 days
            jcb_birthDay.setEnabled(true);

            int selectedMonth = (int) jcb_birthMonth.getSelectedIndex(); //because --year-- is of index 0, Jan starts with 1
            int selectedYear = Integer.parseInt((String) jcb_birthYear.getSelectedItem());
            int daysInMonth = Employee.getDaysInMonth(selectedMonth, Employee.is_leap_year(selectedYear));

            String[] array = new String[daysInMonth + 1]; //because --day-- is the default value of index 0
            array[0] = "--day--";
            for (int i = 1; i <= daysInMonth; i++) {
                array[i] = Integer.toString(i);
            }
            DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>(array);
            jcb_birthDay.setModel(model);
        } else {
            jcb_birthDay.setEnabled(false);
        }
    }//GEN-LAST:event_jcb_birthMonthActionPerformed

    private void jcb_branchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcb_branchActionPerformed
        int branch_id = jcb_branch.getSelectedIndex();

        if (branch_id > 0) {
            Branch selectedBranch = this.organization.getBranches().get(branch_id);
            if (selectedBranch != null) {
                updateDepartmentComboBox(selectedBranch);
            }
        }
        updateComponentStates();
    }//GEN-LAST:event_jcb_branchActionPerformed

    private void jb_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_clearActionPerformed
        // clear all fields and sets everything to default values
        clearFields();
        updateComponentStates();
    }//GEN-LAST:event_jb_clearActionPerformed

    private void jcb_countryCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcb_countryCodeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jcb_countryCodeActionPerformed

    public Organization getOrganization() {
        return organization;
    }

    private boolean validateFields() {

        String first_name = (String) tf_fname.getText();
        if (!first_name.matches("^[a-zA-Z\\s'-]+$")) {
            JOptionPane.showMessageDialog(null, "Please enter the first name(e.g 'Michael')", "validation error", 2);
            return false;
        }
        String last_name = (String) tf_lname.getText();
        if (!last_name.matches("^[a-zA-Z\\s'-]+$")) {
            JOptionPane.showMessageDialog(null, "Please enter the last name(e.g 'Scott')", "validation error", 2);
            return false;
        }
        String email = (String) tf_email.getText();
        if (!email.matches("^[^@\\s]+@[^@\\s\\.]+\\.[^@\\s]+$")) {
            JOptionPane.showMessageDialog(null, "Please enter email in format (example@mail.com)", "validation error", 2);
            return false;
        }
        String phone = (String) tf_phone.getText();
        if (!phone.matches("^\\d[\\d -]*\\d$")) {
            JOptionPane.showMessageDialog(null, "Please enter phone number (e.g 555-1729)", "validation error", 2);
            return false;
        }

        String[] comboBoxFieldNames = {"birth year", "birth month", "birth day", "gender", "department", "branch", "role"};
        JComboBox[] comboBoxFields = {jcb_birthYear, jcb_birthMonth, jcb_birthDay, jcb_gender, jcb_department, jcb_branch, jcb_roles};

        // iterates through each of the comboBox fields, if selected Index is 0 which is default, message is shown and false is returned
        for (int i = 0; i < comboBoxFields.length; i++) {
            if (comboBoxFields[i].getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(null, "Please specify Employee's " + comboBoxFieldNames[i], "validation error", 2);
                return false;
            }
        }
        return true;
    }

    
    private Employee createEmployee() {
        String roleName = (String) jcb_roles.getSelectedItem();
        int branch_id = jcb_branch.getSelectedIndex();
        double salary = Double.parseDouble(js_salary.getValue().toString());
        int birthYear = Integer.parseInt((String) jcb_birthYear.getSelectedItem());
        int birthMonth = (int) jcb_birthMonth.getSelectedIndex();
        int birthDay = Integer.parseInt((String) jcb_birthDay.getSelectedItem());

        String birthDate = String.format("%04d-%02d-%02d", birthYear, birthMonth, birthDay);
        String first_name = (String) tf_fname.getText();
        String last_name = (String) tf_lname.getText();
        String gender = (String) jcb_gender.getSelectedItem();
        String email = (String) tf_email.getText();
        String phone = (String) tf_phone.getText();
        String department = (String) jcb_department.getSelectedItem();

        Department dep = this.getOrganization().getBranches().get(branch_id).getDepartments().get(HierarchyLevel.valueOf(department));

        Employee emp = new Employee(first_name, last_name, gender, birthDate, roleName, salary, phone, email, branch_id, dep);

        return emp;
    }
    
    
    private Employee saveEmployee() {
        Employee emp = null;
        if (validateFields()) {
            emp = createEmployee();
            Employee manager = emp.getDepartment().getManager();
            if (manager!=null){emp.setSupervisor_id(manager.getEmp_Id());}
            
            boolean added = emp.getDepartment().addEmployee(emp);
            if (added) {
                JOptionPane.showMessageDialog(null, "Employee added successfully: " + emp.getEmp_Id());
                this.emprecords.getAdded().push(emp); 
                return emp;
            } else {
                JOptionPane.showMessageDialog(null, "Failed to add employee. Please check the details.", "unsuccessful operation", 0);
            }
        }
        return null;
    }
    
    
    private void updateDepartmentComboBox(Branch selectedBranch) {
        String[] departmentNames = selectedBranch.getDepartmentNames(); // Assumes getDepartmentNames() returns String[]
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>(departmentNames);
        jcb_department.setModel(model);
    }

    private void updateRolesComboBox(Department selectedDepartment) {
        Set<String> roles = selectedDepartment.getRoles().keySet();
        String[] roleNames = new String[roles.size() + 1];
        roleNames[0] = "--Not Specified";
        int i = 1;
        for (String r : roles) {
            roleNames[i++] = r;
        }
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>(roleNames);
        jcb_roles.setModel(model);
    }

    private void updateSalary(Branch branch) {
        String selection = (String) jcb_department.getSelectedItem().toString().trim();
        HierarchyLevel level = HierarchyLevel.valueOf(selection);
        if (level != null) {
            int[] data = level.calculateSalary();
            SpinnerNumberModel numbermodel = new SpinnerNumberModel(data[0], data[0], data[1], data[2]);
            js_salary.setModel(numbermodel);
        }
    }

    private void clearFields() {
        tf_fname.setText("");
        tf_lname.setText("");
        tf_email.setText("");
        tf_phone.setText("");

        // Reuse the model for resetting JComboBoxes
        jcb_birthYear.setSelectedIndex(0);
        jcb_birthMonth.setSelectedIndex(0);
        jcb_birthDay.setSelectedIndex(0);
        jcb_department.setSelectedIndex(0);
        jcb_roles.setSelectedIndex(0);
        jcb_gender.setSelectedIndex(0);
        js_salary.setValue("X");

    }

    private void updateComponentStates() {
        boolean isDepartmentSelected = jcb_department.getSelectedIndex() != 0;
        jcb_roles.setEnabled(isDepartmentSelected);
        boolean isRoleSelected = jcb_roles.getSelectedIndex() != 0;
        js_salary.setEnabled(isRoleSelected);
        boolean isBranchSelected = jcb_branch.getSelectedIndex() > 0; 
        jcb_department.setEnabled(isBranchSelected);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jb_clear;
    private javax.swing.JButton jb_saveEmp;
    private javax.swing.JLabel jbl_phone;
    private final javax.swing.JComboBox<String> jcb_birthDay = new javax.swing.JComboBox<>();
    private final javax.swing.JComboBox<String> jcb_birthMonth = new javax.swing.JComboBox<>();
    private final javax.swing.JComboBox<String> jcb_birthYear = new javax.swing.JComboBox<>();
    private final javax.swing.JComboBox<String> jcb_branch = new javax.swing.JComboBox<>();
    private final javax.swing.JComboBox<String> jcb_countryCode = new javax.swing.JComboBox<>();
    private final javax.swing.JComboBox<String> jcb_department = new javax.swing.JComboBox<>();
    private final javax.swing.JComboBox<String> jcb_gender = new javax.swing.JComboBox<>();
    private final javax.swing.JComboBox<String> jcb_roles = new javax.swing.JComboBox<>();
    private final javax.swing.JSpinner js_salary = new javax.swing.JSpinner();
    private javax.swing.JLabel lbl_age;
    private javax.swing.JLabel lbl_branch;
    private javax.swing.JLabel lbl_department;
    private javax.swing.JLabel lbl_email;
    private javax.swing.JLabel lbl_fname;
    private javax.swing.JLabel lbl_gender;
    private javax.swing.JLabel lbl_lname;
    private javax.swing.JLabel lbl_role;
    private javax.swing.JLabel lbl_salary;
    private javax.swing.JTextField tf_email;
    private javax.swing.JTextField tf_fname;
    private javax.swing.JTextField tf_lname;
    private javax.swing.JTextField tf_phone;
    // End of variables declaration//GEN-END:variables
}
