package com.kazcables.forms;

import com.kazcabels.model.Branch;
import com.kazcabels.model.Department;
import com.kazcabels.model.Employee;
import com.kazcabels.model.Organization;
import com.kazcabels.model.Role;
import com.kazcables.recordview.EmployeeRecords;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;


public class addEmployees extends javax.swing.JPanel
{
    private final Organization organization;
    private final EmployeeRecords emprecords;
    private final JDialog jd;

    public addEmployees (Organization org, EmployeeRecords emprecords, JDialog jd)
    {
        initComponents();
        // instantiate all parameters, jd is back-referenced only for method jd.dispose()
        this.organization = org;
        this.emprecords = emprecords;
        this.jd = jd;
        
        // set Branch Choice ComboBox in the beginning
        String[] branchNames = this.organization.getBranchNames();
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>(branchNames);
        jcb_branch.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbl_email = new javax.swing.JLabel();
        jbl_phone = new javax.swing.JLabel();
        lbl_age = new javax.swing.JLabel();
        jcb_roles = new javax.swing.JComboBox<>();
        jcb_department = new javax.swing.JComboBox<>();
        lbl_salary = new javax.swing.JLabel();
        lbl_department = new javax.swing.JLabel();
        tf_fname = new javax.swing.JTextField();
        tf_phone = new javax.swing.JTextField();
        jb_saveEmp = new javax.swing.JButton();
        jcb_birthYear = new javax.swing.JComboBox<>();
        jcb_birthMonth = new javax.swing.JComboBox<>();
        jcb_birthDay = new javax.swing.JComboBox<>();
        jb_clear = new javax.swing.JButton();
        lbl_role = new javax.swing.JLabel();
        lbl_gender = new javax.swing.JLabel();
        jcb_countryCode = new javax.swing.JComboBox<>();
        jcb_gender = new javax.swing.JComboBox<>();
        tf_lname = new javax.swing.JTextField();
        jcb_branch = new javax.swing.JComboBox<>();
        js_salary = new javax.swing.JSpinner();
        lbl_branch = new javax.swing.JLabel();
        lbl_fname = new javax.swing.JLabel();
        tf_email = new javax.swing.JTextField();
        lbl_lname = new javax.swing.JLabel();
        btn_cancel = new javax.swing.JButton();

        lbl_email.setText("Email Adress");

        jbl_phone.setText("Phone Number");

        lbl_age.setText("Date of Birth");

        jcb_roles.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcb_roles.setEnabled(false);
        jcb_roles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcb_rolesActionPerformed(evt);
            }
        });

        jcb_department.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-- Not Specified --", "Executive", "Management", "Sales", "Marketing", "Engineering", "IT (Information Technology)" }));
        jcb_department.setEnabled(false);
        jcb_department.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcb_departmentActionPerformed(evt);
            }
        });

        lbl_salary.setText("Salary");

        lbl_department.setText("Department");

        jb_saveEmp.setText("Save");
        jb_saveEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_saveEmpActionPerformed(evt);
            }
        });

        jcb_birthYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--year--", "2024", "2023", "2022", "2021", "2020", "2019", "2018", "2017", "2016", "2015", "2014", "2013", "2012", "2011", "2010", "2009", "2008", "2007", "2006", "2005", "2004", "2003", "2002", "2001", "2000", "1999", "1998", "1997", "1996", "1995", "1994", "1993", "1992", "1991", "1990", "1989", "1988", "1987", "1986", "1985", "1984", "1983", "1982", "1981", "1980", "1979", "1978", "1977", "1976", "1975", "1974", "1973", "1972", "1971", "1970", "1969", "1968", "1967", "1966", "1965", "1964", "1963", "1962", "1961", "1960" }));
        jcb_birthYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcb_birthYearActionPerformed(evt);
            }
        });

        jcb_birthMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--month--", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));
        jcb_birthMonth.setEnabled(false);
        jcb_birthMonth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcb_birthMonthActionPerformed(evt);
            }
        });

        jcb_birthDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--day--" }));
        jcb_birthDay.setEnabled(false);

        jb_clear.setText("Clear");
        jb_clear.setOpaque(true);
        jb_clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jb_clearActionPerformed(evt);
            }
        });

        lbl_role.setText("Job Specification (role)");

        lbl_gender.setText("Sex");

        jcb_countryCode.setFont(new java.awt.Font("Helvetica Neue", 1, 12)); // NOI18N
        jcb_countryCode.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "+93 Afghanistan", "+358 Aland Islands", "+355 Albania", "+213 Algeria", "+1684 AmericanSamoa", "+376 Andorra", "+244 Angola", "+1264 Anguilla", "+672 Antarctica", "+1268 Antigua and Barbuda", "+54 Argentina", "+374 Armenia", "+297 Aruba", "+61 Australia", "+43 Austria", "+994 Azerbaijan", "+1242 Bahamas", "+973 Bahrain", "+880 Bangladesh", "+1246 Barbados", "+375 Belarus", "+32 Belgium", "+501 Belize", "+229 Benin", "+1441 Bermuda", "+975 Bhutan", "+591 Bolivia, Plurinational State of", "+387 Bosnia and Herzegovina", "+267 Botswana", "+55 Brazil", "+246 British Indian Ocean Territory", "+673 Brunei Darussalam", "+359 Bulgaria", "+226 Burkina Faso", "+257 Burundi", "+855 Cambodia", "+237 Cameroon", "+1 Canada", "+238 Cape Verde", "+ 345 Cayman Islands", "+236 Central African Republic", "+235 Chad", "+56 Chile", "+86 China", "+61 Christmas Island", "+61 Cocos (Keeling) Islands", "+57 Colombia", "+269 Comoros", "+242 Congo", "+243 Congo, The Democratic Republic of the Congo", "+682 Cook Islands", "+506 Costa Rica", "+225 Cote d'Ivoire", "+385 Croatia", "+53 Cuba", "+357 Cyprus", "+420 Czech Republic", "+45 Denmark", "+253 Djibouti", "+1767 Dominica", "+1849 Dominican Republic", "+593 Ecuador", "+20 Egypt", "+503 El Salvador", "+240 Equatorial Guinea", "+291 Eritrea", "+372 Estonia", "+251 Ethiopia", "+500 Falkland Islands (Malvinas)", "+298 Faroe Islands", "+679 Fiji", "+358 Finland", "+33 France", "+594 French Guiana", "+689 French Polynesia", "+241 Gabon", "+220 Gambia", "+995 Georgia", "+49 Germany", "+233 Ghana", "+350 Gibraltar", "+30 Greece", "+299 Greenland", "+1473 Grenada", "+590 Guadeloupe", "+1671 Guam", "+502 Guatemala", "+44 Guernsey", "+224 Guinea", "+245 Guinea-Bissau", "+595 Guyana", "+509 Haiti", "+379 Holy See (Vatican City State)", "+504 Honduras", "+852 Hong Kong", "+36 Hungary", "+354 Iceland", "+91 India", "+62 Indonesia", "+98 Iran, Islamic Republic of Persian Gulf", "+964 Iraq", "+353 Ireland", "+44 Isle of Man", "+972 Israel", "+39 Italy", "+1876 Jamaica", "+81 Japan", "+44 Jersey", "+962 Jordan", "+77 Kazakhstan", "+254 Kenya", "+686 Kiribati", "+850 Korea, Democratic People's Republic of Korea", "+82 Korea, Republic of South Korea", "+965 Kuwait", "+996 Kyrgyzstan", "+856 Laos", "+371 Latvia", "+961 Lebanon", "+266 Lesotho", "+231 Liberia", "+218 Libyan Arab Jamahiriya", "+423 Liechtenstein", "+370 Lithuania", "+352 Luxembourg", "+853 Macao", "+389 Macedonia", "+261 Madagascar", "+265 Malawi", "+60 Malaysia", "+960 Maldives", "+223 Mali", "+356 Malta", "+692 Marshall Islands", "+596 Martinique", "+222 Mauritania", "+230 Mauritius", "+262 Mayotte", "+52 Mexico", "+691 Micronesia, Federated States of Micronesia", "+373 Moldova", "+377 Monaco", "+976 Mongolia", "+382 Montenegro", "+1664 Montserrat", "+212 Morocco", "+258 Mozambique", "+95 Myanmar", "+264 Namibia", "+674 Nauru", "+977 Nepal", "+31 Netherlands", "+599 Netherlands Antilles", "+687 New Caledonia", "+64 New Zealand", "+505 Nicaragua", "+227 Niger", "+234 Nigeria", "+683 Niue", "+672 Norfolk Island", "+1670 Northern Mariana Islands", "+47 Norway", "+968 Oman", "+92 Pakistan", "+680 Palau", "+970 Palestinian Territory, Occupied", "+507 Panama", "+675 Papua New Guinea", "+595 Paraguay", "+51 Peru", "+63 Philippines", "+872 Pitcairn", "+48 Poland", "+351 Portugal", "+1939 Puerto Rico", "+974 Qatar", "+40 Romania", "+7 Russia", "+250 Rwanda", "+262 Reunion", "+590 Saint Barthelemy", "+290 Saint Helena, Ascension and Tristan Da Cunha", "+1869 Saint Kitts and Nevis", "+1758 Saint Lucia", "+590 Saint Martin", "+508 Saint Pierre and Miquelon", "+1784 Saint Vincent and the Grenadines", "+685 Samoa", "+378 San Marino", "+239 Sao Tome and Principe", "+966 Saudi Arabia", "+221 Senegal", "+381 Serbia", "+248 Seychelles", "+232 Sierra Leone", "+65 Singapore", "+421 Slovakia", "+386 Slovenia", "+677 Solomon Islands", "+252 Somalia", "+27 South Africa", "+211 South Sudan", "+500 South Georgia and the South Sandwich Islands", "+34 Spain", "+94 Sri Lanka", "+249 Sudan", "+597 Suriname", "+47 Svalbard and Jan Mayen", "+268 Swaziland", "+46 Sweden", "+41 Switzerland", "+963 Syrian Arab Republic", "+886 Taiwan", "+992 Tajikistan", "+255 Tanzania, United Republic of Tanzania", "+66 Thailand", "+670 Timor-Leste", "+228 Togo", "+690 Tokelau", "+676 Tonga", "+1868 Trinidad and Tobago", "+216 Tunisia", "+90 Turkey", "+993 Turkmenistan", "+1649 Turks and Caicos Islands", "+688 Tuvalu", "+256 Uganda", "+380 Ukraine", "+971 United Arab Emirates", "+44 United Kingdom", "+1 United States", "+598 Uruguay", "+998 Uzbekistan", "+678 Vanuatu", "+58 Venezuela, Bolivarian Republic of Venezuela", "+84 Vietnam", "+1284 Virgin Islands, British", "+1340 Virgin Islands, U.S.", "+681 Wallis and Futuna", "+967 Yemen", "+260 Zambia", "+263 Zimbabwe" }));
        jcb_countryCode.setSelectedIndex(109);

        jcb_gender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Not Specified--", "Male", "Female" }));

        jcb_branch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcb_branchActionPerformed(evt);
            }
        });

        js_salary.setModel(new javax.swing.SpinnerNumberModel(5000, 5000, 100000, 5000));
        js_salary.setEnabled(false);

        lbl_branch.setText("Branch");

        lbl_fname.setText("First Name");

        tf_email.setForeground(new java.awt.Color(102, 102, 102));
        tf_email.setToolTipText("example@mail.ru");

        lbl_lname.setText("Last Name");

        btn_cancel.setText("Cancel");
        btn_cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_cancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbl_role)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jcb_roles, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lbl_fname)
                                .addComponent(lbl_lname))
                            .addComponent(lbl_email)
                            .addComponent(lbl_age)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(lbl_gender)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jcb_birthYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jcb_birthMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jcb_birthDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jcb_gender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(tf_fname)
                                .addComponent(tf_lname, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(tf_email, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lbl_salary)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(js_salary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_department)
                            .addComponent(lbl_branch))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jcb_branch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jcb_department, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jb_saveEmp)
                            .addGap(82, 82, 82)
                            .addComponent(jb_clear)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_cancel))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jbl_phone)
                            .addGap(6, 6, 6)
                            .addComponent(jcb_countryCode, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(tf_phone, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf_fname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_fname))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf_lname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_lname))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_email)
                    .addComponent(tf_email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcb_gender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_gender))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_age)
                    .addComponent(jcb_birthYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcb_birthMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcb_birthDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbl_phone)
                    .addComponent(jcb_countryCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tf_phone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcb_branch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_branch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_department)
                    .addComponent(jcb_department, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbl_role)
                    .addComponent(jcb_roles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(js_salary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbl_salary))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jb_saveEmp)
                    .addComponent(jb_clear)
                    .addComponent(btn_cancel))
                .addContainerGap(41, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jcb_rolesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcb_rolesActionPerformed
        Branch branch = this.organization.getBranches().get(jcb_branch.getSelectedIndex());
        if (branch != null)
        {
            Department department = branch.getDepartments().get((String)jcb_department.getSelectedItem());
            if (department != null) 
            {
                String roleName = (String) jcb_roles.getSelectedItem();
                
                if (roleName != null)
                { 
                    Role role = department.getRoles().get(roleName);
                    if (role != null)
                    {
                        int[] data = {500, 500, 1000, 1};
                        SpinnerNumberModel numbermodel = new SpinnerNumberModel(data[0], data[0], data[1], data[2]);
                        js_salary.setModel(numbermodel);
                        js_salary.setEnabled(true);
                    }
                }
            }
        }
    }//GEN-LAST:event_jcb_rolesActionPerformed

    private void jcb_departmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcb_departmentActionPerformed

        String selectedDepartmentName = (String) jcb_department.getSelectedItem();
        Branch selectedBranch = this.organization.getSpecificBranch((String)jcb_branch.getSelectedItem());
        if(selectedBranch != null && selectedDepartmentName != null) {
            Department selectedDepartment = selectedBranch.getDepartments().get(selectedDepartmentName); // Assumes getDepartment() method exists
            if(selectedDepartment != null) {
                updateRolesComboBox(selectedDepartment);
            }
        }

    }//GEN-LAST:event_jcb_departmentActionPerformed

    private void jb_saveEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_saveEmpActionPerformed
        saveEmployee();
    }//GEN-LAST:event_jb_saveEmpActionPerformed

    private void jcb_birthYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcb_birthYearActionPerformed

        jcb_birthMonth.setSelectedIndex(0);
        jcb_birthDay.setSelectedIndex(0);
        jcb_birthDay.setEnabled(false);
        if (jcb_birthYear.getSelectedIndex()!=0){

            if((Integer.parseInt(jcb_birthYear.getItemAt(1))) - (Integer.parseInt((String) jcb_birthYear.getSelectedItem()))<=18){
                JOptionPane.showMessageDialog(null, "Employee Must be over 18!!");
            }
            else{
                jcb_birthMonth.setEnabled(true);
            }
        }
        else{
            jcb_birthMonth.setEnabled(false);
        }
    }//GEN-LAST:event_jcb_birthYearActionPerformed

    private void jcb_birthMonthActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcb_birthMonthActionPerformed

        // handling and settings the days in a month of Employee's birthMonth
        if (jcb_birthMonth.getSelectedIndex()!=0)
        {
            // After birth Month gets selected, program needs to calculate how many days are there based on Employee's birth year and birth month
            // some years, months like February could have 28 or 29 days
            jcb_birthDay.setEnabled(true);

            int selectedMonth = (int) jcb_birthMonth.getSelectedIndex(); //because --year-- is of index 0, Jan starts with 1
            int selectedYear = Integer.parseInt((String)jcb_birthYear.getSelectedItem());
            int daysInMonth = Employee.getDaysInMonth(selectedMonth, Employee.is_leap_year(selectedYear));

            String[] array = new String[daysInMonth+1]; //because --day-- is the default value of index 0
            array[0]="--day--";
            for (int i = 1; i <= daysInMonth; i++) {
                array[i] = Integer.toString(i);
            }
            DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>(array);
            jcb_birthDay.setModel(model);
        }
        else{
            jcb_birthDay.setEnabled(false);
        }
    }//GEN-LAST:event_jcb_birthMonthActionPerformed

    private void jcb_branchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcb_branchActionPerformed
        String selectedBranchName = (String) jcb_branch.getSelectedItem();
        
        if(selectedBranchName != null)
        {
            Branch selectedBranch = this.organization.getSpecificBranch(selectedBranchName);
            
            if(selectedBranch != null)
            {
                updateDepartmentComboBox(selectedBranch);
            }
        }
    }//GEN-LAST:event_jcb_branchActionPerformed

    private void jb_clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jb_clearActionPerformed
        // clear all fields and sets everything to default values
        clearFields();
    }//GEN-LAST:event_jb_clearActionPerformed

    private void btn_cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_cancelActionPerformed
        this.jd.dispose();
    }//GEN-LAST:event_btn_cancelActionPerformed
    
    private boolean validateFields()
    {
        
        String first_name = (String) tf_fname.getText();
        if (!first_name.matches("^[a-zA-Z\\s'-]+$"))
        {
            JOptionPane.showMessageDialog(null, "Please enter the first name(e.g 'Michael')");
            return false;
        }
        String last_name = (String) tf_lname.getText();
        if (!last_name.matches("^[a-zA-Z\\s'-]+$"))
        {
            JOptionPane.showMessageDialog(null, "Please enter the last name(e.g 'Scott')");
            return false;
        }
        String email = (String) tf_email.getText();
        if (!email.matches("^[^@\\s]+@[^@\\s\\.]+\\.[^@\\s]+$"))
        {
            JOptionPane.showMessageDialog(null, "Please enter email in format (example@mail.com)");
            return false;
        }
        String phone = (String) tf_phone.getText();
        if (!phone.matches("^\\d[\\d -]*\\d$"))
        {
            JOptionPane.showMessageDialog(null, "Please enter phone number (e.g 555-1729)");
            return false;
        }
        
        String[] comboBoxFieldNames = {"birth year", "birth month", "birth day", "gender", "department", "branch", "role"};
        JComboBox[] comboBoxFields = {jcb_birthYear, jcb_birthMonth, jcb_birthDay, jcb_gender, jcb_department, jcb_branch, jcb_roles};
        
        // iterates through each of the comboBox fields, if selected Index is 0 which is default, message is shown and false is returned
        for (int i=0; i<comboBoxFields.length; i++)
        {
            if (comboBoxFields[i].getSelectedIndex()==0)
            {
                JOptionPane.showMessageDialog(null, "Please specify Employee's " + comboBoxFieldNames[i]);
                return false;
            }
        }
        return true;
    }
    
    private boolean saveEmployee()
    {
        boolean valid = validateFields();
        
        if (valid)
        {
            String roleName = (String) jcb_roles.getSelectedItem();
            int branch_id = jcb_branch.getSelectedIndex();
            int salary = (int) js_salary.getValue();
            
            // Age Handing from the Date of Birth
            int birthYear = Integer.parseInt((String)jcb_birthYear.getSelectedItem());
            int birthMonth = (int)jcb_birthMonth.getSelectedIndex();
            int birthDay=Integer.parseInt((String)jcb_birthDay.getSelectedItem());
            
            String birthDate = String.format("%04d-%02d-%02d", birthYear, birthMonth, birthDay); 
            String first_name = (String) tf_fname.getText();
            String last_name = (String) tf_lname.getText();
            String gender = (String) jcb_gender.getSelectedItem();
            String email = (String) tf_email.getText();
            String phone = (String) tf_phone.getText();
            String department = (String)jcb_department.getSelectedItem();
            
            Department dep = this.organization.getBranches().get(branch_id).getDepartments().get(department);
            
            if (dep != null)
            {
                Employee emp = new Employee(first_name,last_name,gender, birthDate, roleName,salary,phone, email, branch_id, dep);
                
                boolean added = this.organization.addEmployee(emp);
                
                if (added)
                {
                    this.emprecords.getAdded().push(emp.getEmp_Id()); // Assuming getEmpId() is the correct method name
                    this.emprecords.addRow(emp.getRow());
                    JOptionPane.showMessageDialog(null, "Employee added successfully: " + emp.getEmp_Id());
                    return true;
                }
                else
                {
                    JOptionPane.showMessageDialog(null, "Failed to add employee. Please check the details.");
                }
            }
        }
        return false;
    }
    
    private void updateDepartmentComboBox(Branch selectedBranch)
    {
        String[] departmentNames = selectedBranch.getDepartmentNames(); // Assumes getDepartmentNames() returns String[]
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>(departmentNames);
        jcb_department.setModel(model);
        jcb_department.setEnabled(true);
    }
    
    private void updateRolesComboBox(Department selectedDepartment)
    {
        String[] roleNames = selectedDepartment.getRoleNames(); // Assumes getRoleNames() returns String[]
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>(roleNames);
        jcb_roles.setModel(model);
        jcb_roles.setEnabled(true);
    }
    
    private void clearFields()
    {
        tf_fname.setText("");
        tf_lname.setText("");
        tf_email.setText("");
        tf_phone.setText("");

        // Reuse the model for resetting JComboBoxes
        
        jcb_birthYear.setSelectedIndex(0);
        jcb_birthMonth.setSelectedIndex(0);
        jcb_birthDay.setSelectedIndex(0);
        jcb_department.setSelectedIndex(0);
        jcb_roles.setSelectedIndex(0);
        jcb_gender.setSelectedIndex(0);

        // Disable components that should not be active until certain conditions are met
        //jcb_roles.setEnabled(false);

        // Correctly setting a new model for js_salary
        SpinnerNumberModel snumbermodel = new SpinnerNumberModel(5000, 5000, 100000, 5000);
        js_salary.setModel(snumbermodel);
        js_salary.setEnabled(false);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_cancel;
    private javax.swing.JButton jb_clear;
    private javax.swing.JButton jb_saveEmp;
    private javax.swing.JLabel jbl_phone;
    private javax.swing.JComboBox<String> jcb_birthDay;
    private javax.swing.JComboBox<String> jcb_birthMonth;
    private javax.swing.JComboBox<String> jcb_birthYear;
    private javax.swing.JComboBox<String> jcb_branch;
    private javax.swing.JComboBox<String> jcb_countryCode;
    private javax.swing.JComboBox<String> jcb_department;
    private javax.swing.JComboBox<String> jcb_gender;
    private javax.swing.JComboBox<String> jcb_roles;
    private javax.swing.JSpinner js_salary;
    private javax.swing.JLabel lbl_age;
    private javax.swing.JLabel lbl_branch;
    private javax.swing.JLabel lbl_department;
    private javax.swing.JLabel lbl_email;
    private javax.swing.JLabel lbl_fname;
    private javax.swing.JLabel lbl_gender;
    private javax.swing.JLabel lbl_lname;
    private javax.swing.JLabel lbl_role;
    private javax.swing.JLabel lbl_salary;
    private javax.swing.JTextField tf_email;
    private javax.swing.JTextField tf_fname;
    private javax.swing.JTextField tf_lname;
    private javax.swing.JTextField tf_phone;
    // End of variables declaration//GEN-END:variables
}
