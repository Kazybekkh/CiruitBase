package com.kazcables.recordview;

import com.kazcables.forms.Home;
import com.kazcables.forms.addEmployees;
import com.kazcables.model.Branch;
import com.kazcables.model.Department;
import com.kazcables.model.Employee;
import com.kazcables.model.HierarchyLevel;
import com.kazcables.model.Organization;
import com.kazcables.util.Db;
import java.awt.Button;
import java.awt.Component;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.Iterator;
import java.util.Stack;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

public final class EmployeeRecords extends javax.swing.JPanel {

    private final Organization organization;
    private final Home home;
    private Stack<Employee> added;
    private Stack<Employee> removed;

    public EmployeeRecords(Organization org, Home home) {
        initComponents();
        this.organization = org;
        this.organization.initBranches();
        this.home = home;
        this.added = new Stack<>();
        this.removed = new Stack<>();

        String[] searchParameter = {"by full name", "by id"};
        DefaultComboBoxModel<String> jl = new DefaultComboBoxModel<>(searchParameter);
        jcb_search_parameter.setModel(jl);
        String[] branchNames = this.organization.getBranchNames();
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>(branchNames);
        jcb_branch.setModel(model);
        showEmployees();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT
     * modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        employeeList = new javax.swing.JTable();
        btn_addEmployee = new javax.swing.JButton();
        btn_saveExit = new javax.swing.JButton();
        btn_refresh = new javax.swing.JButton();
        btn_removeEmployee = new javax.swing.JButton();
        searchPanel = new javax.swing.JPanel();
        jcb_branch = new javax.swing.JComboBox<>();
        tf_searchField = new javax.swing.JTextField();
        btn_search = new javax.swing.JButton();
        jcb_search_parameter = new javax.swing.JComboBox<>();
        jcb_department_prefix = new javax.swing.JComboBox<>();

        setForeground(new java.awt.Color(51, 51, 51));
        setBounds(new java.awt.Rectangle(0, 0, 1000, 0));
        setMaximumSize(new java.awt.Dimension(956, 400));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(960, 520));

        employeeList.setAutoCreateRowSorter(true);
        employeeList.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        employeeList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Emp id", "Department", "First Name", "Last Name", "Salary", "Role", "Gender", "Email", "Phone", "Date of Birth", "branchID", "superID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        employeeList.setOpaque(false);
        jScrollPane1.setViewportView(employeeList);

        btn_addEmployee.setText("add Employee");
        btn_addEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addEmployeeActionPerformed(evt);
            }
        });

        btn_saveExit.setText("Save to database & Exit");
        btn_saveExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_saveExitActionPerformed(evt);
            }
        });

        btn_refresh.setText("Refresh");
        btn_refresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_refreshActionPerformed(evt);
            }
        });

        btn_removeEmployee.setText("Remove Employee");
        btn_removeEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_removeEmployeeActionPerformed(evt);
            }
        });

        jcb_branch.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jcb_branch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcb_branchActionPerformed(evt);
            }
        });

        btn_search.setText("Search");
        btn_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_searchActionPerformed(evt);
            }
        });

        jcb_search_parameter.setEnabled(false);
        jcb_search_parameter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcb_search_parameterActionPerformed(evt);
            }
        });

        jcb_department_prefix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcb_department_prefixActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout searchPanelLayout = new javax.swing.GroupLayout(searchPanel);
        searchPanel.setLayout(searchPanelLayout);
        searchPanelLayout.setHorizontalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jcb_branch, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jcb_search_parameter, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jcb_department_prefix, 0, 160, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(tf_searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_search, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        searchPanelLayout.setVerticalGroup(
            searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(searchPanelLayout.createSequentialGroup()
                .addGroup(searchPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tf_searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_search)
                    .addComponent(jcb_search_parameter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcb_branch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcb_department_prefix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 7, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(btn_addEmployee)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btn_removeEmployee)
                                .addGap(18, 18, 18)
                                .addComponent(btn_saveExit)
                                .addGap(18, 18, 18)
                                .addComponent(btn_refresh))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(170, 170, 170)
                                .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(searchPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_addEmployee)
                    .addComponent(btn_saveExit)
                    .addComponent(btn_refresh)
                    .addComponent(btn_removeEmployee))
                .addContainerGap(48, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btn_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_searchActionPerformed
        updateComponents(jcb_branch, jcb_search_parameter, jcb_department_prefix, btn_search, tf_searchField);
        String searchValue = (String) tf_searchField.getText();
        int branch_id = jcb_branch.getSelectedIndex();
        int parameter = jcb_search_parameter.getSelectedIndex();
        System.out.println("trying to search for employee '" + searchValue + "' from branch id: " + branch_id + "with parameter of " + parameter);
        performSearch(searchValue, branch_id, parameter, jcb_department_prefix);
    }//GEN-LAST:event_btn_searchActionPerformed

    private void jcb_search_parameterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcb_search_parameterActionPerformed
        if (jcb_search_parameter.getSelectedIndex()==1){
            updateDepartmentComboBox(jcb_branch, jcb_department_prefix);
        }
        updateComponents(jcb_branch, jcb_search_parameter, jcb_department_prefix, btn_search, tf_searchField);
    }//GEN-LAST:event_jcb_search_parameterActionPerformed

    private void btn_addEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addEmployeeActionPerformed
        openAddEmployeeDialog();
    }//GEN-LAST:event_btn_addEmployeeActionPerformed

    private void btn_saveExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_saveExitActionPerformed
        saveChanges();
    }//GEN-LAST:event_btn_saveExitActionPerformed


    private void btn_refreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_refreshActionPerformed

        DefaultTableModel model = (DefaultTableModel) this.getEmployeeList().getModel();
        model.setRowCount(0);
        for (Branch b : this.getOrganization().getBranches().values()) {
            for (Department d : b.getDepartments().values()) {
                for (Employee emp : d.getEmployees().values()) {
                    String[] row = emp.getRow();
                    if (row != null) {
                        model.addRow(row);
                    }
                }
            }
        }
        this.getEmployeeList().setModel(model);
    }//GEN-LAST:event_btn_refreshActionPerformed

    private void btn_removeEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_removeEmployeeActionPerformed
        OpenRemoveEmployeeDialog();
    }//GEN-LAST:event_btn_removeEmployeeActionPerformed

    private void jcb_branchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcb_branchActionPerformed
        updateComponents(jcb_branch, jcb_search_parameter, jcb_department_prefix, btn_search, tf_searchField);
    }//GEN-LAST:event_jcb_branchActionPerformed

    private void jcb_department_prefixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcb_department_prefixActionPerformed
        System.out.println(jcb_department_prefix.getSelectedIndex());
        updateComponents(jcb_branch, jcb_search_parameter, jcb_department_prefix, btn_search, tf_searchField);
        if (jcb_department_prefix.isEnabled()) {
            tf_searchField.setToolTipText("Please enter only characters from the left part of the department prefix");
        }
        else{
            tf_searchField.setToolTipText("Please enter first name and last name separated by space ' '");
        }
    }//GEN-LAST:event_jcb_department_prefixActionPerformed
    public Stack<Employee> getRemoved() {
        return removed;
    }

    public Stack<Employee> getAdded() {
        return added;
    }

    public final void showEmployees() {
        DefaultTableModel model = (DefaultTableModel) this.getEmployeeList().getModel();
        model.setRowCount(0);
        //this.getOrganization().getAllEmployees().values().forEach(emp -> model.addRow(emp.getRow()));
        for (Branch b : this.getOrganization().getBranches().values()) {
            if (b != null) {
                for (Department d : b.getDepartments().values()) {
                    if (d != null) {
                        for (Employee emp : d.getEmployees().values()) {
                            if (emp.getSupervisor_id() == null && d.getManager() != null) {
                                emp.setSupervisor_id(d.getManager().getEmp_Id());
                            }
                            String[] row = emp.getRow();
                            if (row != null) {
                                model.addRow(row);
                            }
                        }
                    }
                }
            }
        }
    }

    public void addRow(String[] employeeRecord) {
        DefaultTableModel model = (DefaultTableModel) this.getEmployeeList().getModel();
        model.addRow(employeeRecord);
        this.getEmployeeList().setModel(model);
        model = null;
    }

    public void openAddEmployeeDialog() {
        addEmployees addEmpPanel = new addEmployees(this.getOrganization(), this); // Assume this is a JPanel for adding employees
        this.getHome().showDialogPanel(addEmpPanel, "Add Employee");
    }

    public boolean saveRemovedEmployees() {
        if (this.getRemoved().isEmpty()) {
            return false;
        }

        String sqlRemove = "DELETE FROM employee WHERE emp_id = ?";
        try (Connection connection = Db.getConnection(); PreparedStatement preparedStatement = connection.prepareStatement(sqlRemove)) {

            connection.setAutoCommit(false);
            while (!this.getRemoved().isEmpty()) {
                Employee emp = this.getRemoved().pop();
                String emp_id = emp.getEmp_Id();
                preparedStatement.setString(1, emp_id);
                preparedStatement.addBatch();
            }
            preparedStatement.executeBatch();
            connection.commit();
            return true;
        } catch (SQLException x) {
            JOptionPane.showMessageDialog(null, "Failed to remove employees: " + x.getMessage());
            return false;
        }
    }

    public boolean saveAddedEmployees() {
        if (this.getAdded().isEmpty()) {
            return false;
        }
        String sqlinserting = "INSERT INTO employee (emp_id, department_id, first_name, last_name, salary, role, sex, email, phone, birthDate, super_id, branch_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
        try (Connection connection = Db.getConnection(); PreparedStatement preparedStatement = connection.prepareStatement(sqlinserting)) {

            connection.setAutoCommit(false);
            while (!this.getAdded().isEmpty()) {
                Employee emp = this.getAdded().pop();
                if (emp != null) {
                    preparedStatement.setString(1, emp.getEmp_Id());
                    preparedStatement.setInt(2, emp.getDepartment().getLevel().getLevel());
                    preparedStatement.setString(3, emp.getName());
                    preparedStatement.setString(4, emp.getLastName());
                    preparedStatement.setDouble(5, emp.getSalary());
                    preparedStatement.setString(6, emp.getRole().getName());
                    preparedStatement.setString(7, emp.getGender());
                    preparedStatement.setString(8, emp.getEmail());
                    preparedStatement.setString(9, emp.getPhone_number());
                    preparedStatement.setDate(10, emp.getFormattedBirthDate(emp.getBirthDate())); // Make sure this returns Date in sql, java,sql,date ...?
                    preparedStatement.setString(11, emp.getSupervisor_id());
                    preparedStatement.setInt(12, emp.getBranch_id());
                }
                preparedStatement.addBatch();
            }
            preparedStatement.executeBatch();
            connection.commit();
            connection.close();
            return true;
        } catch (SQLException sqx) {
            JOptionPane.showMessageDialog(null, "Failed to add employees: " + sqx.getMessage());
            return false;
        }
    }

    public void saveChanges() {
        boolean addedResult = saveAddedEmployees();
        boolean removedResult = saveRemovedEmployees();

        if (addedResult && removedResult) {
            JOptionPane.showMessageDialog(null, "All changes saved successfully.");
        } else {
            // This condition assumes you want to show a failure message even if one operation failed.
            JOptionPane.showMessageDialog(null, "No changes to be made");
        }
    }

    private void performSearch(String searchValue, int branch_id, int search_parameter, JComboBox jcb_department) {
        Employee searchEmp = null;

        if (search_parameter == 0) { // Search by full name
            searchEmp = this.getOrganization().searchEmployeeByName(branch_id, searchValue);
        } else if (search_parameter == 1) { // Search by ID
            String department = (String) jcb_department.getSelectedItem().toString().trim().toUpperCase();
            HierarchyLevel lvl = HierarchyLevel.valueOf(department);
            if (lvl!=null){searchEmp = this.getOrganization().searchEmployeeByID(branch_id, lvl, searchValue);}
        }
        if (searchEmp != null) {
            openEmployeeInfo(searchEmp);
        } else {
            JOptionPane.showMessageDialog(null, "Employee not found.");
        }
    }

    public void openEmployeeInfo(Employee emp) {
        JFrame fr = new JFrame();
        EmployeeInfo info = new EmployeeInfo(emp, this.getOrganization(), this);
        fr.setSize(400, 400);
        fr.add(info);
        fr.setVisible(true);
    }

    @SuppressWarnings("unchecked")
    public void OpenRemoveEmployeeDialog() {
        btn_removeEmployee.setEnabled(false);
        JDialog jd = new JDialog();
        jd.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        jd.setTitle("Remove Employee");
        JPanel jp = new JPanel();
        for (Component comp : searchPanel.getComponents()) {
            if (comp instanceof JLabel) {
                JLabel label = (JLabel) comp;
                jp.add(new JLabel(label.getText()));
            } else if (comp instanceof JButton) {
                JButton button = (JButton) comp;
                JButton newButton = new JButton(button.getText());
                // Note: Action listeners are not copied here. You'll need to reattach them manually.
                jp.add(newButton);
            } else if (comp instanceof JTextField) {
                JTextField textField = (JTextField) comp;
                jp.add(new JTextField(textField.getText(), textField.getColumns()));
            }
            // Add more conditions for other component types as needed.
        }
        jp.revalidate();
        jp.repaint();
        Button close = new Button("close");
        close.addActionListener(e -> jd.dispose());
        jp.add(close);
        jd.setSize(WIDTH, HEIGHT);
        jd.add(jp);
    }
    public void populateDepartmentComboBox(JComboBox<String> DepartmentCombo, int branch_id){
        Branch b = this.getOrganization().getBranches().get(branch_id);
        if (b != null) {
            String[] departmentNames = b.getDepartmentPrefixes();
            System.out.println(Arrays.toString(departmentNames));
            DefaultComboBoxModel<String> jcbmodel = new DefaultComboBoxModel<>(departmentNames);
            DepartmentCombo.setModel(jcbmodel);
            DepartmentCombo.setSelectedIndex(0);
        }
    }
    public void updateComponents(JComboBox<String> branchCombo, JComboBox<String> searchParameterCombo, JComboBox<String> departmentCombo, JButton searchButton, JTextField searchField) {
        boolean isBranchSelected = branchCombo.getSelectedIndex()>0;
        searchParameterCombo.setEnabled(isBranchSelected);
        if (!isBranchSelected) {
            // If no branch is selected, reset to default state.
            departmentCombo.setEnabled(false);
            departmentCombo.setVisible(false);
            searchButton.setEnabled(false);
            searchField.setEnabled(false);
            return;
        }
        // Branch is selected; determine the search method.
        boolean isSearchByName = searchParameterCombo.getSelectedIndex() == 0;
        boolean isSearchByDepartment = searchParameterCombo.getSelectedIndex() == 1;
        
        // Handle search by name.
        searchField.setEnabled(isSearchByName || (isSearchByDepartment && departmentCombo.getSelectedIndex()!=0));
        searchButton.setEnabled(isSearchByName && !searchField.getText().trim().isEmpty());

        // Handle search by department.
        departmentCombo.setVisible(isSearchByDepartment);
        departmentCombo.setEnabled(isSearchByDepartment);
        
        // For search by department, the search button should be enabled only after a department is selected.
        if (isSearchByDepartment && departmentCombo.getSelectedIndex() > 0) {
            searchButton.setEnabled(true);
        } else if (isSearchByDepartment) {
            searchButton.setEnabled(false);
        }
    }
    
    private void updateDepartmentComboBox(JComboBox<String> branchCombo, JComboBox<String> departmentCombo) {
        // Assume getDepartmentNamesForBranch is a method that returns department names for the selected branch.
        String[] departmentNames = this.getOrganization().getBranches().get(branchCombo.getSelectedIndex()).getDepartmentPrefixes();
        departmentCombo.setModel(new DefaultComboBoxModel<>(departmentNames));
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_addEmployee;
    private javax.swing.JButton btn_refresh;
    private javax.swing.JButton btn_removeEmployee;
    private javax.swing.JButton btn_saveExit;
    private javax.swing.JButton btn_search;
    private javax.swing.JTable employeeList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> jcb_branch;
    private javax.swing.JComboBox<String> jcb_department_prefix;
    private javax.swing.JComboBox<String> jcb_search_parameter;
    private javax.swing.JPanel searchPanel;
    private javax.swing.JTextField tf_searchField;
    // End of variables declaration//GEN-END:variables

    public Organization getOrganization() {
        return organization;
    }

    public Home getHome() {
        return home;
    }

    public javax.swing.JTable getEmployeeList() {
        return employeeList;
    }

    public javax.swing.JPanel getSearchPanel() {
        return searchPanel;
    }
}
