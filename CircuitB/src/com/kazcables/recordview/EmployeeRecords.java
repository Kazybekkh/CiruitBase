package com.kazcables.recordview;

import com.kazcables.forms.addEmployees;
import com.kazcabels.model.Department;
import com.kazcabels.model.Employee;
import com.kazcabels.model.Organization;
import com.kazcabels.model.Role;
import com.kazcables.util.Db;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Stack;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class EmployeeRecords extends javax.swing.JPanel {
    
    private final Organization organization;
    private Stack<String> added;
    private Stack<String> removed;
    
    Connection connection = null;
    PreparedStatement preparedStatement = null;
    
    public EmployeeRecords(Organization org)
    {
        initComponents();
        //showEmployees(); // updates the JTable TableModel, extracts data from SQL Database
        this.organization = org;
        this.added = new Stack<>();
        this.removed = new Stack<>();
        
        checkSupervisors();
        // iterates through every Employee and sets their supervisors ids if they have one in O(n) time.
        
        
        String[] searchParameter = new String[]{"by full name", "by id"};
        DefaultComboBoxModel<String> jcbmodel = new DefaultComboBoxModel<>(searchParameter);
        jcb_search_parameter.setModel(jcbmodel);
        if (!jcb_search_parameter.isEnabled() || !jcb_search_parameter.isVisible())
        {
            jcb_search_parameter.setEnabled(true);
            jcb_search_parameter.setVisible(true);
        }
        jcb_search_parameter.addActionListener(e -> {
        if (jcb_search_parameter.getSelectedIndex()==1){setDepartmentCombo();}
        else{
            jcb_department_prefix.setEnabled(false);
            jcb_department_prefix.setVisible(false);
        }
        
        });
        showEmployees();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        employeeList = new javax.swing.JTable();
        btn_search = new javax.swing.JButton();
        tf_searchField = new javax.swing.JTextField();
        jcb_department_prefix = new javax.swing.JComboBox<>();
        jcb_search_parameter = new javax.swing.JComboBox<>();
        btn_addEmployee = new javax.swing.JButton();
        btn_saveExit = new javax.swing.JButton();

        setForeground(new java.awt.Color(51, 51, 51));
        setBounds(new java.awt.Rectangle(0, 0, 1000, 0));
        setMaximumSize(new java.awt.Dimension(956, 400));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(960, 520));

        jScrollPane1.setOpaque(false);

        employeeList.setAutoCreateRowSorter(true);
        employeeList.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        employeeList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Emp id", "Department", "First Name", "Last Name", "Salary", "Role", "Gender", "Email", "Phone", "Date of Birth", "branchID", "superID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        employeeList.setColumnSelectionAllowed(true);
        employeeList.setOpaque(false);
        jScrollPane1.setViewportView(employeeList);

        btn_search.setText("Search");
        btn_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_searchActionPerformed(evt);
            }
        });

        jcb_search_parameter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcb_search_parameterActionPerformed(evt);
            }
        });

        btn_addEmployee.setText("add Employee");
        btn_addEmployee.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addEmployeeActionPerformed(evt);
            }
        });

        btn_saveExit.setText("Save & Exit");
        btn_saveExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_saveExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(343, Short.MAX_VALUE)
                .addComponent(jcb_search_parameter, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addComponent(jcb_department_prefix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tf_searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btn_search, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41))
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(btn_addEmployee)
                .addGap(9, 9, 9)
                .addComponent(btn_saveExit)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcb_search_parameter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcb_department_prefix, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tf_searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_search))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_addEmployee)
                    .addComponent(btn_saveExit))
                .addContainerGap(63, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btn_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_searchActionPerformed
        performSearch();
    }//GEN-LAST:event_btn_searchActionPerformed
    public Stack<String> getRemoved() {
        return removed;
    }

    public void setRemoved(Stack<String> removed) {
        this.removed = removed;
    }

    public Stack<String> getAdded() {
        return added;
    }

    public void setAdded(Stack<String> added) {
        this.added = added;
    }
    private void jcb_search_parameterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcb_search_parameterActionPerformed
        boolean showDepartment = jcb_search_parameter.getSelectedIndex() == 1;
        jcb_department_prefix.setEnabled(showDepartment);
        jcb_department_prefix.setVisible(showDepartment);
    }//GEN-LAST:event_jcb_search_parameterActionPerformed

    private void btn_addEmployeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addEmployeeActionPerformed
        openAddEmployeeDialog();
    }//GEN-LAST:event_btn_addEmployeeActionPerformed

    private void btn_saveExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_saveExitActionPerformed
        boolean saved = saveChangesToSQL();
        if (saved){ JOptionPane.showMessageDialog(null, "Changes saved to database!");}
        else {JOptionPane.showMessageDialog(null, "No changes saved!");}
    }//GEN-LAST:event_btn_saveExitActionPerformed
    private void checkSupervisors()
    {
        for (Employee emp: this.organization.getAllEmployees().values())
        {
            Employee manager = emp.getDepartment().getManager();
            if (emp.getSupervisor_id()==null && manager!=null){
                emp.setSupervisor_id(manager.getEmp_Id());
            }
            Role role = emp.getRole();
            String mgr_of = role.getManager_of();
            Department dep = this.organization.getBranches().get(emp.getBranch_id()).getDepartments().get(mgr_of);
            if (dep!=null) {dep.setManager(emp);}
        }
    }
    
    public final void showEmployees()
    {
        DefaultTableModel model = (DefaultTableModel) employeeList.getModel();
        model.setRowCount(0);
        organization.getAllEmployees().values().forEach(emp -> model.addRow(emp.getRow()));
    }

    public void addRow(String[] employeeRecord)
    {
        DefaultTableModel model = (DefaultTableModel) employeeList.getModel();
        model.addRow(employeeRecord);
        employeeList.setModel(model);
        model=null;
    }
    private void openAddEmployeeDialog()
    {
        JDialog jd = new JDialog();
        jd.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        addEmployees addEmp = new addEmployees(this.organization, this, jd);
        jd.add(addEmp);
        jd.setSize(500, 550);
        jd.setTitle("Add Employee");
        jd.setVisible(true);
    }
    public boolean saveChangesToSQL()
    {
        boolean saved = false;
        if (!this.added.isEmpty())
        {
            String sqlInsert = "INSERT INTO employee (emp_id, department_id, first_name, last_name, salary, role, sex, email, phone, birthDate, super_id, branch_id) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
            try{
                connection = DriverManager.getConnection(Db.URL, Db.USER, Db.PASSWORD);
                preparedStatement = connection.prepareStatement(sqlInsert);
                connection.setAutoCommit(false);
                while (!this.added.isEmpty()) 
                {
                    Employee emp = this.organization.searchEmployeeByID(this.added.pop());
                    if (emp != null) {
                        preparedStatement.setString(1, emp.getEmp_Id());
                        // Ensure this is the correct data type and value for department_id
                        preparedStatement.setString(2, emp.getDepartment().getPrefix_id()); 
                        preparedStatement.setString(3, emp.getName());
                        preparedStatement.setString(4, emp.getLastName());
                        preparedStatement.setDouble(5, emp.getSalary());
                        preparedStatement.setString(6, emp.getRole().getName());
                        preparedStatement.setString(7, emp.getGender());
                        preparedStatement.setString(8, emp.getEmail());
                        preparedStatement.setString(9, emp.getPhone_number());
                        preparedStatement.setDate(10, emp.getFormattedBirthDate()); // Make sure this returns java.sql.Date
                        preparedStatement.setString(11, emp.getSupervisor_id());
                        preparedStatement.setInt(12, emp.getBranch_id());
                        preparedStatement.addBatch();
                        
                    }
                }
                preparedStatement.executeBatch();
                connection.commit(); // Commit transaction
                saved = true;
            }
            catch (SQLException sqx) {JOptionPane.showMessageDialog(null, sqx);}
            
        }
        if(!this.removed.isEmpty())
        {
            String sqlRemove = "DELETE FROM employee WHERE emp_id = ?";
            try{
                connection = DriverManager.getConnection(Db.URL, Db.USER, Db.PASSWORD);
                preparedStatement = connection.prepareStatement(sqlRemove);
                connection.setAutoCommit(false);
                while (!this.removed.isEmpty())
                {
                    String emp_id = this.removed.pop();
                    preparedStatement.setString(1, emp_id); 
                    preparedStatement.addBatch();
                    int[] count = preparedStatement.executeBatch();   
                }
                connection.commit();
                saved = true;
            }
            catch (SQLException x) {JOptionPane.showMessageDialog(null, "could not remove employees!!!");}
            
        }
        return saved;
    }
    
    public void setDepartmentCombo()
    {
        String[] departmentNames = this.organization.getBranches().get(1).getDepartmentPrefixes();
        DefaultComboBoxModel<String> jcbmodel = new DefaultComboBoxModel<>(departmentNames);
        jcb_department_prefix.setModel(jcbmodel);
        jcbmodel=null;
    }
    
    private void performSearch()
    {
        Employee searchEmp = null;
        String searchValue = tf_searchField.getText().trim();

        if (jcb_search_parameter.getSelectedIndex() == 0) { // Search by full name
            searchEmp = organization.searchEmployeeByFullName(searchValue.toLowerCase());
        } else if (jcb_search_parameter.getSelectedIndex() == 1) { // Search by ID
            String prefix = (String) jcb_department_prefix.getSelectedItem();
            searchEmp = organization.searchEmployeeByID(prefix + "-" + searchValue);
        }

        if (searchEmp != null) {
            openEmployeeInfo(searchEmp);
        } else {
            JOptionPane.showMessageDialog(null, "Employee not found.");
        }
    }

    public void openEmployeeInfo(Employee emp)
    {
        JFrame fr = new JFrame();
        EmployeeInfo info = new EmployeeInfo(emp, this.organization, this);
        fr.setSize(400, 400);
        fr.add(info);
        fr.setVisible(true);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_addEmployee;
    private javax.swing.JButton btn_saveExit;
    private javax.swing.JButton btn_search;
    private javax.swing.JTable employeeList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> jcb_department_prefix;
    private javax.swing.JComboBox<String> jcb_search_parameter;
    private javax.swing.JTextField tf_searchField;
    // End of variables declaration//GEN-END:variables
}
