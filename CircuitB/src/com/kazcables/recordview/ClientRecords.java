/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.kazcables.recordview;

import com.kazcables.forms.addClient;
import com.kazcabels.model.Client;
import com.kazcabels.model.Organization;
import com.kazcables.util.Db;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.Stack;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class ClientRecords extends javax.swing.JPanel {
    private final Organization organization;
    private final Stack<String> added;
    private final Stack<String> removed;
    
    Connection connection = null;
    PreparedStatement preparedStatement = null;
    
    public ClientRecords(Organization org)
    {
        initComponents();
        
        this.added = new Stack<>();
        this.removed = new Stack<>();
        this.organization = org;
        
        String[] searchParameter = new String[]{"by client_name", "by client_id"};
        DefaultComboBoxModel <String> jcbmodel = new DefaultComboBoxModel<>(searchParameter);
        jcb_search_parameter.setModel(jcbmodel);
        if (!jcb_search_parameter.isEnabled() || !jcb_search_parameter.isVisible())
        {
            jcb_search_parameter.setEnabled(true);
            jcb_search_parameter.setVisible(true);
            
        }
        showClients();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        clientList = new javax.swing.JTable();
        lbl_clientRecords = new javax.swing.JLabel();
        btn_addClient = new javax.swing.JButton();
        jcb_search_parameter = new javax.swing.JComboBox<>();
        tf_searchField = new javax.swing.JTextField();
        btn_search = new javax.swing.JButton();
        btn_save_exit = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(960, 520));

        clientList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "client_id", "client_name", "branch_id", "assigned_to"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(clientList);

        lbl_clientRecords.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        lbl_clientRecords.setText("Client Records");

        btn_addClient.setText("Add Client");
        btn_addClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addClientActionPerformed(evt);
            }
        });

        btn_search.setText("Search");
        btn_search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_searchActionPerformed(evt);
            }
        });

        btn_save_exit.setText("Save & Exit");
        btn_save_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_save_exitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 455, Short.MAX_VALUE)
                .addComponent(jcb_search_parameter, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(tf_searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btn_search, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(119, 119, 119)
                        .addComponent(btn_addClient)
                        .addGap(30, 30, 30)
                        .addComponent(btn_save_exit))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 434, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_clientRecords))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jcb_search_parameter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tf_searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_search))
                .addGap(4, 4, 4)
                .addComponent(lbl_clientRecords)
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_addClient)
                    .addComponent(btn_save_exit))
                .addGap(78, 78, 78))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btn_searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_searchActionPerformed
        searchDecision();
    }//GEN-LAST:event_btn_searchActionPerformed

    private void btn_addClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addClientActionPerformed
        openAddClientDialog();
    }//GEN-LAST:event_btn_addClientActionPerformed

    private void btn_save_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_save_exitActionPerformed
        saveExit();
    }//GEN-LAST:event_btn_save_exitActionPerformed

    public final void showClients(){
        if (!this.organization.getAllClients().isEmpty())
        {
            DefaultTableModel model = (DefaultTableModel) clientList.getModel();
            model.setRowCount(0);
            for (Client c: this.organization.getAllClients().values())
            {
                model.addRow(c.getRow());
            }
            clientList.setModel(model);
            model = null;
        }
    }
    
    public void openAddClientDialog()
    {
        JDialog jd = new JDialog();
        jd.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        addClient addclient = new addClient(this.organization, this, jd);
        jd.add(addclient);
        jd.setSize(350, 350);
        jd.setTitle("Add Client");
        jd.setVisible(true);
    }
    
    public void openClientInfo(Client client)
    {
        JFrame jf = new JFrame();
        ClientInfo info = new ClientInfo(client, this.organization, this);
        jf.setSize(500, 500);
        jf.add(info);
        jf.setVisible(true);
    }
    
    public void addRow(String[] clientRecord)
    {
        DefaultTableModel model = (DefaultTableModel) clientList.getModel();
        model.addRow(clientRecord);
        clientList.setModel(model);
    }
    
    public void searchDecision()
    {
        if (jcb_search_parameter.getSelectedIndex()==0){
            performSearchClientByFullName();
        }
        else if (jcb_search_parameter.getSelectedIndex()==1){
            performSearchClientByID();
        }
    }
    
    public void performSearchClientByID()
    {
        String id = (String) tf_searchField.getText();
        Client client = this.organization.searchClientByID(id);
        
        if (client!=null) {openClientInfo(client);}
        else {JOptionPane.showMessageDialog(null, "Client with id " + id + " Was not found");}
    }
    
    public void performSearchClientByFullName()
    {
        String client_name = (String) tf_searchField.getText().trim().toLowerCase();
        
        Client client = this.organization.searchClientByName(client_name);
        
        if (client != null) {openClientInfo(client);}
        else {JOptionPane.showMessageDialog(null, "Client with name " + client_name + " was not found");}
    }
    
    private void saveExit()
    {
        boolean saved = false;
        if (!this.added.isEmpty())
        {
            String sqlInsert = "INSERT INTO clients (client_id, client_name, email, phone, branch_id) VALUES (?, ?, ?, ?, ?)";
            try{
                connection = DriverManager.getConnection(Db.URL, Db.USER, Db.PASSWORD);
                preparedStatement = connection.prepareStatement(sqlInsert);
                connection.setAutoCommit(false);
                while (!this.added.isEmpty())
                {
                    String id = this.added.pop();
                    Client client = this.organization.searchClientByID(id);
                    if (client != null)
                    {
                        preparedStatement.setString(1, client.getClient_id());
                        preparedStatement.setString(2, client.getName()); 
                        preparedStatement.setString(3, client.getEmail());
                        preparedStatement.setString(4, client.getPhone_number());
                        preparedStatement.setInt(5, client.getBranch_id()); 
                        preparedStatement.addBatch();
                    }
                }
                preparedStatement.executeBatch();
                connection.commit(); // Commit transaction
            }
            catch(SQLException sqx){JOptionPane.showMessageDialog(null, sqx);}
            saved = true;
        }
        if(!this.removed.isEmpty())
        {
            String sqlRemove = "DELETE FROM client WHERE client_id = ?";
            try{
                connection = DriverManager.getConnection(Db.URL, Db.USER, Db.PASSWORD);
                preparedStatement = connection.prepareStatement(sqlRemove);
                connection.setAutoCommit(false);
                while (!this.removed.isEmpty())
                {
                    String client_id = this.removed.pop();
                    preparedStatement.setString(1, client_id); 
                    preparedStatement.addBatch();
                    int[] count = preparedStatement.executeBatch();
                }
                connection.commit();
            }
            catch (SQLException x) {JOptionPane.showMessageDialog(null, "could not remove clients!!!");}
            saved = true;
        }
        if (saved){
            JOptionPane.showMessageDialog(null, "Save Successful");
        }
        else{
            JOptionPane.showMessageDialog(null, "Save Successful");
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_addClient;
    private javax.swing.JButton btn_save_exit;
    private javax.swing.JButton btn_search;
    private javax.swing.JTable clientList;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> jcb_search_parameter;
    private javax.swing.JLabel lbl_clientRecords;
    private javax.swing.JTextField tf_searchField;
    // End of variables declaration//GEN-END:variables
}
